import java.util.Scanner;
class Main {
    
    static String align(String s, int n) {
        
        int d = s.length() - n;
        
        if (d > 0) {
            
            return s.substring(0, n);
        } else if (d < 0) {
            
            StringBuilder sb = new StringBuilder();
            
            for (int i = 0; i < -d; i++) {
                
                sb.append("0");
            }
            sb.append(s);
            return sb.toString();
        }
        
        return s;
    }

    private static long[] odejmij(long[] T1, long[] T2, int podstawa) {
        
        int przeniesienie = 0;
        
        long[] wynik = new long[T1.length];
        
        for (int i = T1.length - 1; i >= 0; i--) {
            
            wynik[i] = T1[i] - T2[i] + przeniesienie;

            if (i > 0) {
                if (wynik[i] < 0) {
                    wynik[i] += podstawa;
                    przeniesienie = -1;
                } else {
                    przeniesienie = 0;
                }
            }
        }

        return wynik;
    }
    
    
    static int policzZera(String s) {
        
        int licznik = 0;
        
        for (char c : s.toCharArray()) {
            
            if (c == '0') {
                licznik++;
            }
        }
        
        return licznik;
    }
    
    static boolean greater(long[] tab1, long[] tab2) {
        int n = tab1.length;
        for (int i = 0; i < n; i++) {
            if (tab1[i] != tab2[i]) {
                return tab1[i] > tab2[i];
            }
        }
        return true;
    }

    public static void main(String[] args) {
    //private static void test(String input, long[] output) {
        
        Scanner sc = new Scanner(System.in);

        //Scanner sc = new Scanner(input);
        
        int k = sc.nextInt();
        int podstawa = (int)Math.pow(2, k);
        
        int n1 = sc.nextInt();
        
        long[] tabA = new long[n1];
        
        for (int i = 0; i < n1; i++) {
            
            tabA[i] = sc.nextLong();
        }
        
        int n2 = sc.nextInt();
        long[] tabB = new long[n2];
        
        for (int i = 0; i < n2; i++) {
            
            tabB[i] = sc.nextLong();
        }
        
        
        
        if (n1 > n2) {
            
            long[] tabB2 = new long[n1];
            
            int d = n1 - n2;
            
            for (int i = 0; i < d; i++) {
                
                tabB2[i] = 0;
            }
            
            System.arraycopy(tabB, 0, tabB2, d, n2);
            
            tabB = tabB2;
        } else if (n2 > n1) {
            
            long[] tabA2 = new long[n2];
            
            int d = n2 - n1;
            
            for (int i = 0; i < d; i++) {
                
                tabA2[i] = 0;
            }
            
            System.arraycopy(tabA, 0, tabA2, d, n1);
            
            tabA = tabA2;
        }
        
        
        long[] tabC = odejmij(tabA, tabB, podstawa);
        long[] tabD = odejmij(tabB, tabA, podstawa);
        
        StringBuilder bin1, bin2;

        boolean Agreater = greater(tabA, tabB);
        
        if (Agreater) {
            
            bin1 = new StringBuilder("0");
            bin2 = new StringBuilder(""); 
        } else {
            
            bin1 = new StringBuilder("");
            bin2 = new StringBuilder("0");
        }
        
        for (int i = 0; i < tabC.length; i++) {
            
                if (i > 0) {
                            
                    try {
                        bin1.append(align(Long.toBinaryString(tabC[i]), k));
                        bin2.append(align(Long.toBinaryString(tabD[i]), k));
                    } catch (Exception ex ) {
                        
                    }
                    
                } else {
                    bin1.append(Long.toBinaryString(tabC[i]));
                    bin2.append(Long.toBinaryString(tabD[i]));
                }              
            } 
            
        try {
            if (Agreater) {
                bin2 = new StringBuilder(bin2.subSequence(bin2.length() - bin1.length(), bin2.length()));
            } else {
                bin1 = new StringBuilder(bin1.subSequence(bin1.length() - bin2.length(), bin1.length()));
            }
        } catch (Exception ex) {

        }
        
            
        int C_ile0 = policzZera(bin1.toString());
        int C_ile1 = bin1.length() - C_ile0;
        
        int D_ile0 = policzZera(bin2.toString());
        int D_ile1 = bin2.length() - D_ile0;
        
        System.out.println(C_ile0 + " " + C_ile1);
        System.out.println(D_ile0 + " " + D_ile1);
        
        /*
        assert (C_ile0 == output[0]) : "C_ile0";
        assert (C_ile1 == output[1]) : "C_ile1";
        assert (D_ile0 == output[2]) : "D_ile0";
        assert (D_ile1 == output[3]) : "D_ile1";
        */
    }
    /*
    public static void main(String[] args) {
        
        double start = System.currentTimeMillis();
        test("4\n2 6 15\n2 2 7\n", new long[]{6, 2, 4, 4});
        test("3\n4 2 3 0 0\n5 7 6 2 0 7\n", new long[]{10, 6, 5, 11});
        test("8\n20 199 84 173 154 135 138 91 192 190 32 61 185 82 23 242 190 245 237 56 182\n16 119 200 157 236 208 228 83 241 77 250 163 248 35 164 218 29\n", new long[]{79, 82, 81, 80});
        double end = System.currentTimeMillis();
        
        System.out.println(end - start + " ms");
    } */
}
